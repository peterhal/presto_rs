use crate::lexing::token_kind::TokenKind;
use std::fmt;

#[derive(Copy, Clone, Debug)]
#[allow(non_upper_case_globals, non_camel_case_types)]
pub enum Keyword {
    ALTER,
    AND,
    AS,
    BETWEEN,
    BIGINT,
    BOOLEAN,
    BY,
    CASE,
    CAST,
    CONSTRAINT,
    CREATE,
    CROSS,
    CUBE,
    CURRENT_DATE,
    CURRENT_PATH,
    CURRENT_TIME,
    CURRENT_TIMESTAMP,
    CURRENT_USER,
    DEALLOCATE,
    DECIMAL,
    DELETE,
    DESCRIBE,
    DISTINCT,
    DOUBLE,
    DROP,
    ELSE,
    END,
    ESCAPE,
    EXCEPT,
    EXECUTE,
    EXISTS,
    EXTRACT,
    FALSE,
    FOR,
    FROM,
    FULL,
    FUNCTION,
    GROUP,
    GROUPING,
    HAVING,
    IN,
    INNER,
    INSERT,
    INTEGER,
    INTERSECT,
    INTO,
    IS,
    JOIN,
    LEFT,
    LIKE,
    LOCALTIME,
    LOCALTIMESTAMP,
    NATURAL,
    NORMALIZE,
    NOT,
    NULL,
    ON,
    OR,
    ORDER,
    OUTER,
    PREPARE,
    REAL,
    RECURSIVE,
    RIGHT,
    ROLLUP,
    SELECT,
    SMALLINT,
    TABLE,
    THEN,
    TINYINT,
    TRUE,
    UESCAPE,
    UNION,
    UNNEST,
    USING,
    VALUES,
    VARBINARY,
    VARCHAR,
    WHEN,
    WHERE,
    WITH,
}

impl fmt::Display for Keyword {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}

impl Keyword {
    pub fn to_token_kind(&self) -> TokenKind {
        match self {
            Keyword::ALTER => TokenKind::ALTER,
            Keyword::AND => TokenKind::AND,
            Keyword::AS => TokenKind::AS,
            Keyword::BETWEEN => TokenKind::BETWEEN,
            Keyword::BIGINT => TokenKind::BIGINT,
            Keyword::BOOLEAN => TokenKind::BOOLEAN,
            Keyword::BY => TokenKind::BY,
            Keyword::CASE => TokenKind::CASE,
            Keyword::CAST => TokenKind::CAST,
            Keyword::CONSTRAINT => TokenKind::CONSTRAINT,
            Keyword::CREATE => TokenKind::CREATE,
            Keyword::CROSS => TokenKind::CROSS,
            Keyword::CUBE => TokenKind::CUBE,
            Keyword::CURRENT_DATE => TokenKind::CURRENT_DATE,
            Keyword::CURRENT_PATH => TokenKind::CURRENT_PATH,
            Keyword::CURRENT_TIME => TokenKind::CURRENT_TIME,
            Keyword::CURRENT_TIMESTAMP => TokenKind::CURRENT_TIMESTAMP,
            Keyword::CURRENT_USER => TokenKind::CURRENT_USER,
            Keyword::DEALLOCATE => TokenKind::DEALLOCATE,
            Keyword::DECIMAL => TokenKind::DECIMAL,
            Keyword::DELETE => TokenKind::DELETE,
            Keyword::DESCRIBE => TokenKind::DESCRIBE,
            Keyword::DISTINCT => TokenKind::DISTINCT,
            Keyword::DOUBLE => TokenKind::DOUBLE,
            Keyword::DROP => TokenKind::DROP,
            Keyword::ELSE => TokenKind::ELSE,
            Keyword::END => TokenKind::END,
            Keyword::ESCAPE => TokenKind::ESCAPE,
            Keyword::EXCEPT => TokenKind::EXCEPT,
            Keyword::EXECUTE => TokenKind::EXECUTE,
            Keyword::EXISTS => TokenKind::EXISTS,
            Keyword::EXTRACT => TokenKind::EXTRACT,
            Keyword::FALSE => TokenKind::FALSE,
            Keyword::FOR => TokenKind::FOR,
            Keyword::FROM => TokenKind::FROM,
            Keyword::FULL => TokenKind::FULL,
            Keyword::FUNCTION => TokenKind::FUNCTION,
            Keyword::GROUP => TokenKind::GROUP,
            Keyword::GROUPING => TokenKind::GROUPING,
            Keyword::HAVING => TokenKind::HAVING,
            Keyword::IN => TokenKind::IN,
            Keyword::INNER => TokenKind::INNER,
            Keyword::INSERT => TokenKind::INSERT,
            Keyword::INTEGER => TokenKind::INTEGER,
            Keyword::INTERSECT => TokenKind::INTERSECT,
            Keyword::INTO => TokenKind::INTO,
            Keyword::IS => TokenKind::IS,
            Keyword::JOIN => TokenKind::JOIN,
            Keyword::LEFT => TokenKind::LEFT,
            Keyword::LIKE => TokenKind::LIKE,
            Keyword::LOCALTIME => TokenKind::LOCALTIME,
            Keyword::LOCALTIMESTAMP => TokenKind::LOCALTIMESTAMP,
            Keyword::NATURAL => TokenKind::NATURAL,
            Keyword::NORMALIZE => TokenKind::NORMALIZE,
            Keyword::NOT => TokenKind::NOT,
            Keyword::NULL => TokenKind::NULL,
            Keyword::ON => TokenKind::ON,
            Keyword::OR => TokenKind::OR,
            Keyword::ORDER => TokenKind::ORDER,
            Keyword::OUTER => TokenKind::OUTER,
            Keyword::PREPARE => TokenKind::PREPARE,
            Keyword::REAL => TokenKind::REAL,
            Keyword::RECURSIVE => TokenKind::RECURSIVE,
            Keyword::RIGHT => TokenKind::RIGHT,
            Keyword::ROLLUP => TokenKind::ROLLUP,
            Keyword::SELECT => TokenKind::SELECT,
            Keyword::SMALLINT => TokenKind::SMALLINT,
            Keyword::TABLE => TokenKind::TABLE,
            Keyword::THEN => TokenKind::THEN,
            Keyword::TINYINT => TokenKind::TINYINT,
            Keyword::TRUE => TokenKind::TRUE,
            Keyword::UESCAPE => TokenKind::UESCAPE,
            Keyword::UNION => TokenKind::UNION,
            Keyword::UNNEST => TokenKind::UNNEST,
            Keyword::USING => TokenKind::USING,
            Keyword::VALUES => TokenKind::VALUES,
            Keyword::VARBINARY => TokenKind::VARBINARY,
            Keyword::VARCHAR => TokenKind::VARCHAR,
            Keyword::WHEN => TokenKind::WHEN,
            Keyword::WHERE => TokenKind::WHERE,
            Keyword::WITH => TokenKind::WITH,
        }
    }
}

pub fn maybe_get_keyword(value: &str) -> Option<Keyword> {
    match value.to_ascii_uppercase().as_str() {
        "ALTER" => Some(Keyword::ALTER),
        "AND" => Some(Keyword::AND),
        "AS" => Some(Keyword::AS),
        "BETWEEN" => Some(Keyword::BETWEEN),
        "BIGINT" => Some(Keyword::BIGINT),
        "BOOLEAN" => Some(Keyword::BOOLEAN),
        "BY" => Some(Keyword::BY),
        "CASE" => Some(Keyword::CASE),
        "CAST" => Some(Keyword::CAST),
        "CONSTRAINT" => Some(Keyword::CONSTRAINT),
        "CREATE" => Some(Keyword::CREATE),
        "CROSS" => Some(Keyword::CROSS),
        "CUBE" => Some(Keyword::CUBE),
        "CURRENT_DATE" => Some(Keyword::CURRENT_DATE),
        "CURRENT_PATH" => Some(Keyword::CURRENT_PATH),
        "CURRENT_TIME" => Some(Keyword::CURRENT_TIME),
        "CURRENT_TIMESTAMP" => Some(Keyword::CURRENT_TIMESTAMP),
        "CURRENT_USER" => Some(Keyword::CURRENT_USER),
        "DEALLOCATE" => Some(Keyword::DEALLOCATE),
        "DECIMAL" => Some(Keyword::DECIMAL),
        "DELETE" => Some(Keyword::DELETE),
        "DESCRIBE" => Some(Keyword::DESCRIBE),
        "DISTINCT" => Some(Keyword::DISTINCT),
        "DOUBLE" => Some(Keyword::DOUBLE),
        "DROP" => Some(Keyword::DROP),
        "ELSE" => Some(Keyword::ELSE),
        "END" => Some(Keyword::END),
        "ESCAPE" => Some(Keyword::ESCAPE),
        "EXCEPT" => Some(Keyword::EXCEPT),
        "EXECUTE" => Some(Keyword::EXECUTE),
        "EXISTS" => Some(Keyword::EXISTS),
        "EXTRACT" => Some(Keyword::EXTRACT),
        "FALSE" => Some(Keyword::FALSE),
        "FOR" => Some(Keyword::FOR),
        "FROM" => Some(Keyword::FROM),
        "FULL" => Some(Keyword::FULL),
        "FUNCTION" => Some(Keyword::FUNCTION),
        "GROUP" => Some(Keyword::GROUP),
        "GROUPING" => Some(Keyword::GROUPING),
        "HAVING" => Some(Keyword::HAVING),
        "IN" => Some(Keyword::IN),
        "INNER" => Some(Keyword::INNER),
        "INSERT" => Some(Keyword::INSERT),
        "INTEGER" => Some(Keyword::INTEGER),
        "INTERSECT" => Some(Keyword::INTERSECT),
        "INTO" => Some(Keyword::INTO),
        "IS" => Some(Keyword::IS),
        "JOIN" => Some(Keyword::JOIN),
        "LEFT" => Some(Keyword::LEFT),
        "LIKE" => Some(Keyword::LIKE),
        "LOCALTIME" => Some(Keyword::LOCALTIME),
        "LOCALTIMESTAMP" => Some(Keyword::LOCALTIMESTAMP),
        "NATURAL" => Some(Keyword::NATURAL),
        "NORMALIZE" => Some(Keyword::NORMALIZE),
        "NOT" => Some(Keyword::NOT),
        "NULL" => Some(Keyword::NULL),
        "ON" => Some(Keyword::ON),
        "OR" => Some(Keyword::OR),
        "ORDER" => Some(Keyword::ORDER),
        "OUTER" => Some(Keyword::OUTER),
        "PREPARE" => Some(Keyword::PREPARE),
        "REAL" => Some(Keyword::REAL),
        "RECURSIVE" => Some(Keyword::RECURSIVE),
        "RIGHT" => Some(Keyword::RIGHT),
        "ROLLUP" => Some(Keyword::ROLLUP),
        "SELECT" => Some(Keyword::SELECT),
        "SMALLINT" => Some(Keyword::SMALLINT),
        "TABLE" => Some(Keyword::TABLE),
        "THEN" => Some(Keyword::THEN),
        "TINYINT" => Some(Keyword::TINYINT),
        "TRUE" => Some(Keyword::TRUE),
        "UESCAPE" => Some(Keyword::UESCAPE),
        "UNION" => Some(Keyword::UNION),
        "UNNEST" => Some(Keyword::UNNEST),
        "USING" => Some(Keyword::USING),
        "VALUES" => Some(Keyword::VALUES),
        "VARBINARY" => Some(Keyword::VARBINARY),
        "VARCHAR" => Some(Keyword::VARCHAR),
        "WHEN" => Some(Keyword::WHEN),
        "WHERE" => Some(Keyword::WHERE),
        "WITH" => Some(Keyword::WITH),
        _ => None,
    }
}
